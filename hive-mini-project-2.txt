Objective - The assignment is meant for you to apply learnings of the module on Hive on a real-life dataset. One of the major objectives of this assignment is gaining familiarity with how an analysis works in Hive and how you can gain insights from large datasets.
 
Problem Statement - New York City is a thriving metropolis and just like most other cities of similar size, one of the biggest problems its residents face is parking. The classic combination of a huge number of cars and a cramped geography is the exact recipe that leads to a large number of parking tickets.
 
In an attempt to scientifically analyse this phenomenon, the NYC Police Department regularly collects data related to parking tickets. This data is made available by NYC Open Data portal. We will try and perform some analysis on this data.

Download Dataset - https://data.cityofnewyork.us/browse?q=parking+tickets

Note: Consider only the year 2017 for analysis and not the Fiscal year.


Create table parking_tickets
(
summons_number int,
plate_id string,
reg_state string,
plate_type string,
issue_date string,
voilation_code int,
vehicle_body_type string,
vehicle_make string,
issuing_agency string,
street_code1 int,
street_code2 int,
street_code3 int,
vehicle_expiration_date string,
voilation_location int,
voilation_precinct int,
issuer_precinct int,
issuer_code int,
issuer_command string,
issuer_squad string,
voilation_time string,
time_first_observed string,
voilation_county string,
voilation_in_front_of_or_opposite string,
House_Number string,
Street_Name string,
Intersecting_Street string,
Date_First_Observed string,
Law_Section int,
Sub_Division string,
Violation_Legal_Code string,
Days_Parking_In_Effect string,
From_Hours_In_Effect string,
To_Hours_In_Effect string,
Vehicle_Color string,
Unregistered_Vehicle boolean,
Vehicle_Year string,
Meter_Number string,
Feet_From_Curb int,
Violation_Post_Code string,
Violation_Description string,
No_Standing_or_Stopping_Violation string,
Hydrant_Violation string,
Double_Parking_Violation string
)
row format delimited
fields terminated by ','
stored as textfile

load data inpath '/user/cloudera/hive_class/parking_violations.csv' into table parking_tickets

The analysis can be divided into two parts:
 
Part-I: Examine the data

1.) Find the total number of tickets for the year.
                 SELECT count(distinct summons_number) FROM parking_tickets1

2.) Find out how many unique states the cars which got parking tickets came from.
                 SELECT distinct reg_state FROM parking_tickets1 ORDER BY reg_state

    

3.) Some parking tickets donâ€™t have addresses on them, which is cause for concern. Find out how many such tickets there are(i.e. tickets where either "Street Code 1" or "Street Code 2" or "Street Code 3" is empty )
                 SELECT count(distinct summons_number) FROM parking_tickets1
                 where street_code1 IS NOT NULL AND street_code2 IS NOT NULL AND street_code3 IS NOT NULL


Part-II: Aggregation tasks

1.) How often does each violation code occur? (frequency of violation codes - find the top 5)
                 select a.voilation_code , a.no_of_voilations , ((24*60*365) / a.no_of_voilations) as minutes_per_ticket
                 from (select voilation_code, count(DISTINCT summons_number) as no_of_voilations FROM parking_tickets1 group by voilation_code)a
                 order by minutes_per_ticket limit 5
 
2.) How often does each vehicle body type get a parking ticket? How about the vehicle make? (find the top 5 for both)
    
                 select a.vehicle_make,violation_description, ((24*60*365) / a.no_of_voilations) as minutes_per_ticket
                 from (select vehicle_make, count(DISTINCT summons_number) as no_of_voilations,violation_description FROM parking_tickets1 
                 group by vehicle_make,violation_description)a
                 where violation_description LIKE '%PKG%' OR violation_description LIKE '%Parking%'
                 order by minutes_per_ticket DESC limit 5  

                 select a.vehicle_body_type,violation_description, ((24*60*365) / a.no_of_voilations) as minutes_per_ticket
                 from (select vehicle_body_type, count(DISTINCT summons_number) as no_of_voilations,violation_description FROM parking_tickets1 
                 group by vehicle_body_type,violation_description)a
                 where violation_description LIKE '%PKG%' OR violation_description LIKE '%Parking%'
                 order by minutes_per_ticket
                 limit 5
        

3.) A precinct is a police station that has a certain zone of the city under its command. Find the (5 highest) frequencies of:
      a.) Violating Precincts (this is the precinct of the zone where the violation occurred)
                 select a.voilation_precinct, ((24*60*365) / a.no_of_voilations) as frequency_as_minutes_per_ticket
                 from (select voilation_precinct, count(DISTINCT summons_number) as no_of_voilations FROM parking_tickets1 
                 group by voilation_precinct)a
                 order by frequency_as_minutes_per_ticket
                 limit 5

      b.) Issuer Precincts (this is the precinct that issued the ticket)
                 select a.issuer_precinct, ((24*60*365) / a.no_of_voilations) as frequency_as_minutes_per_ticket
                 from (select issuer_precinct, count(DISTINCT summons_number) as no_of_voilations FROM parking_tickets1 
                 group by issuer_precinct)a
                 order by frequency_as_minutes_per_ticket
                 limit 5     
      
      
      
4.) Find the violation code frequency across 3 precincts which have issued the most number of tickets - do these precinct zones have an exceptionally high frequency of certain violation codes? 
               
               ### find out top 3 precincts which issued most tickets
               select issuer_precinct,count(DISTINCT summons_number) as no_of_voilations 
               FROM parking_tickets1 
               where summons_number is not null 
               group by issuer_precinct
               order by no_of_voilations DESC
               limit 5
               ## ignoring 0 and 1 from result and  considering 18,19 and 14 are the top precinct
               
               select a.issuer_precinct,a.voilation_code, ((24*60*365) / a.no_of_voilations) as minutes_per_ticket
               from (select issuer_precinct,voilation_code, count(DISTINCT summons_number) as no_of_voilations FROM parking_tickets1 
               where issuer_precinct in (18,19,14)
               group by issuer_precinct, voilation_code)a          
                       
               

5.) Find out the properties of parking violations across different times of the day: The Violation Time field is specified in a strange format. Find a way to make this into a time attribute that you can use to divide into groups.

time format used in dataset is like '0140A'
  - we can concat this with 'M' at end
  -using unix timestamp function :extract this as time format with following query
select from_unixtime(unix_timestamp(concat(voilation_time,'M'), 'HHmmaaa'),"HH:mmaaa") as date from parking_tickets1 limit 2



6.) Divide 24 hours into 6 equal discrete bins of time. The intervals you choose are at your discretion. For each of these groups, find the 3 most commonly occurring violations

      create view vw_parking_tickets1
      partitioned on (voilation_code) as
      select summons_number,issuer_precinct,voilation_time,
      CASE 
      WHEN substring(voilation_time,1,2) in ('00','01','02','03','12') and upper(substring(voilation_time,-1))='A' then 1
      WHEN substring(voilation_time,1,2) in ('04','05','06','07') and upper(substring(voilation_time,-1))='A' then 2
      WHEN substring(voilation_time,1,2) in ('08','09','10','11') and upper(substring(voilation_time,-1))='A' then 3
      WHEN substring(voilation_time,1,2) in ('12','01','02','03') and upper(substring(voilation_time,-1))='P' then 4
      WHEN substring(voilation_time,1,2) in ('04','05','06','07') and upper(substring(voilation_time,-1))='P' then 5
      WHEN substring(voilation_time,1,2) in ('08','09','10','11') and upper(substring(voilation_time,-1))='P' then 6
      else null
      END as voilation_time_bin,
      voilation_code
      from parking_tickets1
      where voilation_time is not NULL


      ## Finding out top 3 voilations in time_bin = 1
      select voilation_code , count(distinct summons_number) as no_of_voilations
      from vw_parking_tickets1
      where voilation_time_bin = '1'
      group by voilation_code
      order by no_of_voilations DESC limit 3

      ## Finding out top 3 voilations in time_bin = 2
      select voilation_code , count(distinct summons_number) as no_of_voilations
      from vw_parking_tickets1
      where voilation_time_bin = '2'
      group by voilation_code
      order by no_of_voilations DESC limit 3

      ## Finding out top 3 voilations in time_bin = 3
      select voilation_code , count(distinct summons_number) as no_of_voilations
      from vw_parking_tickets1
      where voilation_time_bin = '3'
      group by voilation_code
      order by no_of_voilations DESC limit 3

      ## Finding out top 3 voilations in time_bin = 4
      select voilation_code , count(distinct summons_number) as no_of_voilations
      from vw_parking_tickets1
      where voilation_time_bin = '4'
      group by voilation_code
      order by no_of_voilations DESC limit 3

      ## Finding out top 3 voilations in time_bin = 5
      select voilation_code , count(distinct summons_number) as no_of_voilations
      from vw_parking_tickets1
      where voilation_time_bin = '5'
      group by voilation_code
      order by no_of_voilations DESC limit 3

      ## Finding out top 3 voilations in time_bin = 6
      select voilation_code , count(distinct summons_number) as no_of_voilations
      from vw_parking_tickets1
      where voilation_time_bin = '6'
      group by voilation_code
      order by no_of_voilations DESC limit 3




7.) Now, try another direction. For the 3 most commonly occurring violation codes, find the most common times of day (in terms of the bins from the previous part)

      select voilation_time_bin, count(distinct summons_number) as no_of_voilations from vw_parking_tickets1 where voilation_code in (21, 38,36) 
      group by voilation_time_bin order by no_of_voilations desc limit 3



8.) Letâ€™s try and find some seasonality in this data
      a.) First, divide the year into some number of seasons, and find frequencies of tickets for each season. (Hint: A quick Google search reveals the following seasons in NYC: Spring(March, April, March); Summer(June, July, August); Fall(September, October, November); Winter(December, January, February))
      
         create view vw_tickets_issued_seasons1
         partitioned on (Voilation_Code) 
         as
         select Issuer_Precinct, 
         case 
         when col1[0] between 03 and 05 then 'spring' 
         when col1[0] between 06 and 08 then 'summer' 
         when col1[0] between 09 and 11 then 'autumn' 
         when col1[0] in (01,02,12) then 'winter' 
         else 'unknown' 
         end  as season,
         Voilation_Code 
         from 
         (select issuer_precinct,split(Issue_Date,'/') as col1,voilation_code 
             from parking_tickets1 )abc

      
      
      
      b.)Then, find the 3 most common violations for each of these seasons.

Note: Please ensure you make necessary optimizations to your queries like selecting the appropriate table format, using partitioned/bucketed tables. Marks will be awarded for keeping the performance also in mind.
 
